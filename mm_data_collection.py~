import csv
from collections import defaultdict


class TourneyData:
    def __init__(self):
        self.teams_csv = "data/Teams.csv"
        self.tourney_results_csv = "data/TourneyCompactResults.csv"
        self.tourney_seeds_csv = "data/TourneySeeds.csv"
        self.tourney_slots_csv = "data/TourneySlots.csv"
        self.team_dict = {}
        self.tourney_results_dict = defaultdict(dict)
        self.tourney_seeds_dict = defaultdict(dict)

    def get_team_dict(self):
        with open(self.teams_csv) as teams_csv:
            reader = csv.DictReader(teams_csv)
            for row in reader:
                team_id = row["Team_Id"]
                team_name = row["Team_Name"]
                self.team_dict[team_id] = team_name
        return self.team_dict

    def get_tourney_results(self):
        with open(self.tourney_results_csv) as tr_csv:
            reader = csv.DictReader(tr_csv)
            for row in reader:
                year = row["Season"]

                winning_team = row["Wteam"]
                losing_team = row["Lteam"]
                wl_relation = "{}-{}".format(winning_team, losing_team)

                winning_score = row["Wscore"]
                losing_score = row["Lscore"]
                wl_score = "{}-{}".format(winning_score, losing_score)

                self.tourney_results_dict[year].update({wl_relation : wl_score})
        return self.tourney_results_dict
    
    def get_tourney_seeds(self):
        with open(self.tourney_seeds_csv) as ts_csv:
            reader = csv.DictReader(ts_csv)
            for row in reader:
                year = row["Season"]
                team_seed = row["Seed"]
                team_name = row["Team"]
                self.tourney_seeds_dict[year].update({team_name : team_seed})
        return self.tourney_seeds_dict

#Testing functions
td = TourneyData() 
team_dict = td.get_team_dict()
tourney_results_dict = td.get_tourney_results()
tourney_seeds_dict = td.get_tourney_seeds()

for year in tourney_seeds_dict:
    print(year, tourney_seeds_dict[year])
