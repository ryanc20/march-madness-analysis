import pygal
import csv
from collections import defaultdict
from collections import Counter

class TourneyData:
    def __init__(self):
        self.teams_csv = "data/Teams.csv"
        self.tourney_results_csv = "data/TourneyCompactResults.csv"
        self.tourney_seeds_csv = "data/TourneySeeds.csv"
        self.tourney_slots_csv = "data/TourneySlots.csv"
        self.team_dict = {}

        self.tourney_results_dict = defaultdict(list)
        self.tourney_seeds_dict = defaultdict(dict)
        self.tsr_dict = defaultdict(dict)
        self.ts_dict = defaultdict(dict)

    def get_team_dict(self):
        with open(self.teams_csv) as teams_csv:
            reader = csv.DictReader(teams_csv)
            for row in reader:
                team_id = row["Team_Id"]
                team_name = row["Team_Name"]
                self.team_dict[team_id] = team_name
        return self.team_dict

    def get_tourney_results(self):
        with open(self.tourney_results_csv) as tr_csv:
            reader1 = csv.DictReader(tr_csv)
            for row1 in reader1:
                year = row1["Season"]
                winning_team = row1["Wteam"]
                losing_team = row1["Lteam"]
                self.tourney_results_dict[year].append([winning_team, losing_team])
        return self.tourney_results_dict
    
    def get_tourney_seeds(self):
        with open(self.tourney_seeds_csv) as ts_csv:
            reader = csv.DictReader(ts_csv)
            for row in reader:
                year = row["Season"]
                team_seed = row["Seed"]
                team_name = row["Team"]
                self.tourney_seeds_dict[year].update({team_seed : team_name})
        return self.tourney_seeds_dict

    def get_all_data(self):
        team_dict = self.get_team_dict()
        tourney_results_dict = self.get_tourney_results()
        tourney_seeds_dict = self.get_tourney_seeds()
        #ts_dict = self.match_seeds()
        return team_dict, tourney_results_dict, tourney_seeds_dict

    
    def match_seeds(self):
        for year1 in self.tourney_results_dict:
            for year2 in self.tourney_seeds_dict:
                if year1 == year2:
                    for winning_team, losing_team in self.tourney_results_dict[year1]:
                        #print(year1, key1, self.tourney_results_dict[year1][key1])
                        for seed, team in self.tourney_seeds_dict[year2]:
                            if winning_team == team:
                                w_team = team
                                w_seed = seed
                            if losing_team == team:
                                l_team = team
                                l_seed = seed
                            year = year1
                        winning = "{}-{}".format(w_team, w_seed)
                        losing = "{}-{}".format(l_team, l_seed)
                        self.tsr_dict[year].update({winning : losing})
        return self.tsr_dict
    

    def get_tourney_slots(self):
        with open(self.tourney_slots_csv) as ts_csv:
            reader = csv.DictReader(ts_csv)
            for row in reader:
                year = row["Season"]
                slot = row["Slot"]
                high_seed = row["Strongseed"]
                low_seed = row["Weakseed"]
                match_up = "{}-{}".format(high_seed, low_seed)
                self.ts_dict[year].update({slot : match_up})
        return self.ts_dict

    def first_round_history(self):
        """
        Analyzes the first round odds for each seed to win/lose (i.e. 1 vs 16, 2 vs 15, ...)
        Using Pygal SolidGuage charts because they look pretty good I guess...
        """
        self.ts_dict = self.get_tourney_slots()
        self.tsr_dict = self.match_seeds()
        first_seed_win = 0
        second_seed_win = 0
        third_seed_win = 0
        fourth_seed_win = 0
        fifth_seed_win = 0
        sixth_seed_win = 0
        seventh_seed_win = 0
        eighth_seed_win = 0
        total_games = 128

        for year1 in self.ts_dict:            
            for slot, match_up in self.ts_dict[year1].items():
                if slot[:2] == "R1":
                    for year2 in self.tsr_dict:
                        if year1 == year2:
                            for winning, losing in self.tsr_dict[year2].items():
                                if winning[5:] == match_up[:3]:
                                    seed = winning[6:]                                    
                                    if seed == "01":
                                        first_seed_win += 1
                                    elif seed == "02":
                                        second_seed_win += 1
                                    elif seed == "03":
                                        third_seed_win += 1
                                    elif seed == "04":
                                        fourth_seed_win += 1
                                    elif seed == "05":
                                        fifth_seed_win += 1
                                    elif seed == "06":
                                        sixth_seed_win += 1
                                    elif seed == "07":
                                        seventh_seed_win += 1
                                    elif seed == "08":
                                        eighth_seed_win += 1            
        
        #print(first_seed_win, second_seed_win, third_seed_win, fourth_seed_win, fifth_seed_win, sixth_seed_win, seventh_seed_win, eighth_seed_win, total_games)

        gauge = pygal.SolidGauge(inner_radius=0.70, title="NCAA First Round Results")
        ratio_first_seed = int(first_seed_win / total_games * 100)
        ratio_second_seed = int(second_seed_win / total_games * 100)
        ratio_third_seed = int(third_seed_win / total_games * 100)
        ratio_fourth_seed = int(fourth_seed_win / total_games * 100)
        ratio_fifth_seed = int(fifth_seed_win / total_games * 100)
        ratio_sixth_seed = int(sixth_seed_win / total_games * 100)
        ratio_seventh_seed = int(seventh_seed_win / total_games * 100)
        ratio_eighth_seed = int(eighth_seed_win / total_games * 100)     

        percent_formatter = lambda x: '{:.10g}%'.format(x)
        gauge.value_formatter = percent_formatter
        gauge.add('1 vs. 16', [{'value': ratio_first_seed, 'max_value': 100}])
        gauge.add('2 vs. 15', [{'value': ratio_second_seed, 'max_value': 100}])
        gauge.add('3 vs. 14', [{'value': ratio_third_seed, 'max_value': 100}])
        gauge.add('4 vs. 13', [{'value': ratio_fourth_seed, 'max_value': 100}])
        gauge.add('5 vs. 12', [{'value': ratio_fifth_seed, 'max_value': 100}])
        gauge.add('6 vs. 11', [{'value': ratio_sixth_seed, 'max_value': 100}])
        gauge.add('7 vs. 10', [{'value': ratio_seventh_seed, 'max_value': 100}])
        gauge.add('8 vs. 9', [{'value': ratio_eighth_seed, 'max_value': 100}])
        
        gauge.render_to_file('chart.svg')
                                
    def get_tourney_rounds(self, conference, year):
        """
        Returns the ACTUAL results of each round of the March Madness tournament
        for the given conference and year.
        
        The format is identical to the q_agent's output format allowing the
        agent to compare the output with the actual output for a conference 
        and year to update rewards in the q-table.
        """
        ts_dict = self.get_tourney_slots()
        seed_dict = self.get_tourney_seeds()
        tr_dict = self.get_tourney_results()

        round_1 = list()
        round_2 = list()
        round_3 = list()
        round_4 = list()
        round1_winners = list()

        for seed, team in seed_dict[year].items():
            for winning, losing in tr_dict[year]:
                if team == winning and conference in seed:
                    round1_winners.append(seed[1:])
        #removes duplicates because I did this part weirdly... HEHEH
        round1_winners = list(set(round1_winners))

        win_counter = defaultdict(int)
        for seed, team in seed_dict[year].items():        
            for winning, losing in tr_dict[year]:
                if team == winning and conference in seed:
                    win_counter[winning] += 1
        
        for slot, matchup in ts_dict[year].items():
            if conference in slot and "R1" in slot:  
                round_1.append("{}-{}".format(matchup[1:3], matchup[-2:]))
        round_1 = sorted(round_1)
        
        #for match in round_1:
        for winner1 in round1_winners:
            if winner1 in round_1[0]:
                for winner2 in round1_winners:
                    if winner2 in round_1[-1]:
                        round_2.append("{}-{}".format(winner1, winner2))
            if winner1 in round_1[1]:
                for winner2 in round1_winners:
                    if winner2 in round_1[-2]:
                        round_2.append("{}-{}".format(winner1, winner2))
            if winner1 in round_1[2]:
                for winner2 in round1_winners:
                    if winner2 in round_1[-3]:
                        round_2.append("{}-{}".format(winner1, winner2))
            if winner1 in round_1[3]:
                for winner2 in round1_winners:
                    if winner2 in round_1[-4]:
                        round_2.append("{}-{}".format(winner1, winner2))
        round_2 = sorted(round_2)

        round2_winners = list()
        for seed, team in seed_dict[year].items():
            for team2, count in win_counter.items():
                if team == team2 and count > 1:
                    round2_winners.append(seed[1:])
        
        for winner1 in round2_winners:
            if winner1 in round_2[0]:
                for winner2 in round2_winners:
                    if winner2 in round_2[-1]:
                        round_3.append("{}-{}".format(winner1, winner2))
            if winner1 in round_2[1]:
                for winner2 in round2_winners:
                    if winner2 in round_2[-2]:
                        round_3.append("{}-{}".format(winner1, winner2))
        round_3 = sorted(round_3)

        round3_winners = list()
        for seed, team in seed_dict[year].items():
            for team2, count in win_counter.items():
                if team == team2 and count > 2:
                    round3_winners.append(seed[1:])

        for winner1 in round3_winners:
            if winner1 in round_3[0]:
                for winner2 in round3_winners:
                    if winner2 in round_3[-1]:
                        round_4.append("{}-{}".format(winner1, winner2))
        round_4 = sorted(round_4)

        winner = list()
        for seed, team in seed_dict[year].items():
            for team2, count in win_counter.items():
                if team == team2 and count > 3:
                    winner.append(seed[1:])

        conferences = {"W": "East", "X": "Midwest", "Y": "South", "Z": "West"}

        print("CONFERENCE: {}, YEAR: {}".format(conferences[conference], year))
        print("ROUND1:", round_1)
        print("ROUND2:", round_2)
        print("ROUND3:", round_3)
        print("ROUND4:", round_4)
        print("WINNER:", winner)

        #clearing out the tourney results dictionary
        tr_dict.clear()

        return round_1, round_2, round_3, round_4, winner

    def get_complete_tourney_results(self, year):      
        #East Conference Results
        w_round_1, w_round_2, w_round_3, w_round_4, w_winner = self.get_tourney_rounds("W", year)
        #Midwest Conference Results
        x_round_1, x_round_2, x_round_3, x_round_4, x_winner = self.get_tourney_rounds("X", year)
        #South Conference Results
        y_round_1, y_round_2, y_round_3, y_round_4, y_winner = self.get_tourney_rounds("Y", year)
        #West Conference Results
        z_round_1, z_round_2, z_round_3, z_round_4, z_winner = self.get_tourney_rounds("Z", year)
        
        w_winner = "W{}".format(w_winner[0])
        x_winner = "X{}".format(x_winner[0])
        y_winner = "Y{}".format(y_winner[0])
        z_winner = "Z{}".format(z_winner[0])
        final_four = [w_winner, x_winner, y_winner, z_winner]

        final_four_matchup = []
        final_four_matchup.append("{}-{}".format(w_winner, x_winner))
        final_four_matchup.append("{}-{}".format(y_winner, z_winner))

        ts_dict = self.get_tourney_slots()
        seed_dict = self.get_tourney_seeds()
        tr_dict = self.get_tourney_results()

        #counts number of wins each team in the final four got
        ff_win_counter = defaultdict(int)
        for seed, team in seed_dict[year].items():        
            for winning, losing in tr_dict[year]:
                for seed2 in final_four:
                    if winning == team and seed == seed2:
                        ff_win_counter[seed] += 1
        championship = []
        for matchup in final_four_matchup:
            if ff_win_counter[matchup[:3]] > ff_win_counter[matchup[4:]]:
                championship.append(matchup[:3])
            else:
                championship.append(matchup[4:])

        championship_matchup = ["{}-{}".format(championship[0], championship[1])]
        print(championship_matchup)

        champion = []
        for matchup in championship_matchup:
            if ff_win_counter[matchup[:3]] > ff_win_counter[matchup[4:]]:
                champion.append(matchup[:3])
            else:
                champion.append(matchup[4:])
        
data = TourneyData()

#team_dict, tourney_results_dict, tourney_seeds_dict = data.get_all_data()
year = "2002"
test = data.get_complete_tourney_results(year)



